/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Consultation } from "./Consultation";
import { ConsultationCountArgs } from "./ConsultationCountArgs";
import { ConsultationFindManyArgs } from "./ConsultationFindManyArgs";
import { ConsultationFindUniqueArgs } from "./ConsultationFindUniqueArgs";
import { CreateConsultationArgs } from "./CreateConsultationArgs";
import { UpdateConsultationArgs } from "./UpdateConsultationArgs";
import { DeleteConsultationArgs } from "./DeleteConsultationArgs";
import { PredictionFindManyArgs } from "../../prediction/base/PredictionFindManyArgs";
import { Prediction } from "../../prediction/base/Prediction";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { Astrologer } from "../../astrologer/base/Astrologer";
import { User } from "../../user/base/User";
import { ConsultationService } from "../consultation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Consultation)
export class ConsultationResolverBase {
  constructor(
    protected readonly service: ConsultationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "any",
  })
  async _consultationsMeta(
    @graphql.Args() args: ConsultationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Consultation])
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "any",
  })
  async consultations(
    @graphql.Args() args: ConsultationFindManyArgs
  ): Promise<Consultation[]> {
    return this.service.consultations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Consultation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "own",
  })
  async consultation(
    @graphql.Args() args: ConsultationFindUniqueArgs
  ): Promise<Consultation | null> {
    const result = await this.service.consultation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consultation)
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "create",
    possession: "any",
  })
  async createConsultation(
    @graphql.Args() args: CreateConsultationArgs
  ): Promise<Consultation> {
    return await this.service.createConsultation({
      ...args,
      data: {
        ...args.data,

        astrologer: args.data.astrologer
          ? {
              connect: args.data.astrologer,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consultation)
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "update",
    possession: "any",
  })
  async updateConsultation(
    @graphql.Args() args: UpdateConsultationArgs
  ): Promise<Consultation | null> {
    try {
      return await this.service.updateConsultation({
        ...args,
        data: {
          ...args.data,

          astrologer: args.data.astrologer
            ? {
                connect: args.data.astrologer,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consultation)
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "delete",
    possession: "any",
  })
  async deleteConsultation(
    @graphql.Args() args: DeleteConsultationArgs
  ): Promise<Consultation | null> {
    try {
      return await this.service.deleteConsultation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Prediction], { name: "predictions" })
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "read",
    possession: "any",
  })
  async findPredictions(
    @graphql.Parent() parent: Consultation,
    @graphql.Args() args: PredictionFindManyArgs
  ): Promise<Prediction[]> {
    const results = await this.service.findPredictions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Report], { name: "reports" })
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @graphql.Parent() parent: Consultation,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Astrologer, {
    nullable: true,
    name: "astrologer",
  })
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "read",
    possession: "any",
  })
  async getAstrologer(
    @graphql.Parent() parent: Consultation
  ): Promise<Astrologer | null> {
    const result = await this.service.getAstrologer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Consultation): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
