/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Kundli as PrismaKundli,
  User as PrismaUser,
} from "@prisma/client";

export class KundliServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.KundliCountArgs, "select">): Promise<number> {
    return this.prisma.kundli.count(args);
  }

  async kundlis(args: Prisma.KundliFindManyArgs): Promise<PrismaKundli[]> {
    return this.prisma.kundli.findMany(args);
  }
  async kundli(
    args: Prisma.KundliFindUniqueArgs
  ): Promise<PrismaKundli | null> {
    return this.prisma.kundli.findUnique(args);
  }
  async createKundli(args: Prisma.KundliCreateArgs): Promise<PrismaKundli> {
    return this.prisma.kundli.create(args);
  }
  async updateKundli(args: Prisma.KundliUpdateArgs): Promise<PrismaKundli> {
    return this.prisma.kundli.update(args);
  }
  async deleteKundli(args: Prisma.KundliDeleteArgs): Promise<PrismaKundli> {
    return this.prisma.kundli.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.kundli
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
