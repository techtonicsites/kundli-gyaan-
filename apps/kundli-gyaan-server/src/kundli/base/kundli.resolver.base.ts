/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Kundli } from "./Kundli";
import { KundliCountArgs } from "./KundliCountArgs";
import { KundliFindManyArgs } from "./KundliFindManyArgs";
import { KundliFindUniqueArgs } from "./KundliFindUniqueArgs";
import { CreateKundliArgs } from "./CreateKundliArgs";
import { UpdateKundliArgs } from "./UpdateKundliArgs";
import { DeleteKundliArgs } from "./DeleteKundliArgs";
import { User } from "../../user/base/User";
import { KundliService } from "../kundli.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Kundli)
export class KundliResolverBase {
  constructor(
    protected readonly service: KundliService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Kundli",
    action: "read",
    possession: "any",
  })
  async _kundlisMeta(
    @graphql.Args() args: KundliCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Kundli])
  @nestAccessControl.UseRoles({
    resource: "Kundli",
    action: "read",
    possession: "any",
  })
  async kundlis(@graphql.Args() args: KundliFindManyArgs): Promise<Kundli[]> {
    return this.service.kundlis(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Kundli, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Kundli",
    action: "read",
    possession: "own",
  })
  async kundli(
    @graphql.Args() args: KundliFindUniqueArgs
  ): Promise<Kundli | null> {
    const result = await this.service.kundli(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Kundli)
  @nestAccessControl.UseRoles({
    resource: "Kundli",
    action: "create",
    possession: "any",
  })
  async createKundli(@graphql.Args() args: CreateKundliArgs): Promise<Kundli> {
    return await this.service.createKundli({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Kundli)
  @nestAccessControl.UseRoles({
    resource: "Kundli",
    action: "update",
    possession: "any",
  })
  async updateKundli(
    @graphql.Args() args: UpdateKundliArgs
  ): Promise<Kundli | null> {
    try {
      return await this.service.updateKundli({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Kundli)
  @nestAccessControl.UseRoles({
    resource: "Kundli",
    action: "delete",
    possession: "any",
  })
  async deleteKundli(
    @graphql.Args() args: DeleteKundliArgs
  ): Promise<Kundli | null> {
    try {
      return await this.service.deleteKundli(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Kundli): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
