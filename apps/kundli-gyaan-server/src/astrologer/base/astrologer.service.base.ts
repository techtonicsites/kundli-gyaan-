/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Astrologer as PrismaAstrologer,
  CallRecord as PrismaCallRecord,
  Consultation as PrismaConsultation,
} from "@prisma/client";

export class AstrologerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AstrologerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.astrologer.count(args);
  }

  async astrologers(
    args: Prisma.AstrologerFindManyArgs
  ): Promise<PrismaAstrologer[]> {
    return this.prisma.astrologer.findMany(args);
  }
  async astrologer(
    args: Prisma.AstrologerFindUniqueArgs
  ): Promise<PrismaAstrologer | null> {
    return this.prisma.astrologer.findUnique(args);
  }
  async createAstrologer(
    args: Prisma.AstrologerCreateArgs
  ): Promise<PrismaAstrologer> {
    return this.prisma.astrologer.create(args);
  }
  async updateAstrologer(
    args: Prisma.AstrologerUpdateArgs
  ): Promise<PrismaAstrologer> {
    return this.prisma.astrologer.update(args);
  }
  async deleteAstrologer(
    args: Prisma.AstrologerDeleteArgs
  ): Promise<PrismaAstrologer> {
    return this.prisma.astrologer.delete(args);
  }

  async findCallRecords(
    parentId: string,
    args: Prisma.CallRecordFindManyArgs
  ): Promise<PrismaCallRecord[]> {
    return this.prisma.astrologer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .callRecords(args);
  }

  async findConsultations(
    parentId: string,
    args: Prisma.ConsultationFindManyArgs
  ): Promise<PrismaConsultation[]> {
    return this.prisma.astrologer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .consultations(args);
  }
}
