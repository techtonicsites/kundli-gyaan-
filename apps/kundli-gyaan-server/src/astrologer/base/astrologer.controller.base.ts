/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AstrologerService } from "../astrologer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AstrologerCreateInput } from "./AstrologerCreateInput";
import { Astrologer } from "./Astrologer";
import { AstrologerFindManyArgs } from "./AstrologerFindManyArgs";
import { AstrologerWhereUniqueInput } from "./AstrologerWhereUniqueInput";
import { AstrologerUpdateInput } from "./AstrologerUpdateInput";
import { CallRecordFindManyArgs } from "../../callRecord/base/CallRecordFindManyArgs";
import { CallRecord } from "../../callRecord/base/CallRecord";
import { CallRecordWhereUniqueInput } from "../../callRecord/base/CallRecordWhereUniqueInput";
import { ConsultationFindManyArgs } from "../../consultation/base/ConsultationFindManyArgs";
import { Consultation } from "../../consultation/base/Consultation";
import { ConsultationWhereUniqueInput } from "../../consultation/base/ConsultationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AstrologerControllerBase {
  constructor(
    protected readonly service: AstrologerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Astrologer })
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAstrologer(
    @common.Body() data: AstrologerCreateInput
  ): Promise<Astrologer> {
    return await this.service.createAstrologer({
      data: data,
      select: {
        consultationPrice: true,
        createdAt: true,
        id: true,
        name: true,
        rating: true,
        specialization: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Astrologer] })
  @ApiNestedQuery(AstrologerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async astrologers(@common.Req() request: Request): Promise<Astrologer[]> {
    const args = plainToClass(AstrologerFindManyArgs, request.query);
    return this.service.astrologers({
      ...args,
      select: {
        consultationPrice: true,
        createdAt: true,
        id: true,
        name: true,
        rating: true,
        specialization: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Astrologer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async astrologer(
    @common.Param() params: AstrologerWhereUniqueInput
  ): Promise<Astrologer | null> {
    const result = await this.service.astrologer({
      where: params,
      select: {
        consultationPrice: true,
        createdAt: true,
        id: true,
        name: true,
        rating: true,
        specialization: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Astrologer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAstrologer(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() data: AstrologerUpdateInput
  ): Promise<Astrologer | null> {
    try {
      return await this.service.updateAstrologer({
        where: params,
        data: data,
        select: {
          consultationPrice: true,
          createdAt: true,
          id: true,
          name: true,
          rating: true,
          specialization: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Astrologer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAstrologer(
    @common.Param() params: AstrologerWhereUniqueInput
  ): Promise<Astrologer | null> {
    try {
      return await this.service.deleteAstrologer({
        where: params,
        select: {
          consultationPrice: true,
          createdAt: true,
          id: true,
          name: true,
          rating: true,
          specialization: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/callRecords")
  @ApiNestedQuery(CallRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CallRecord",
    action: "read",
    possession: "any",
  })
  async findCallRecords(
    @common.Req() request: Request,
    @common.Param() params: AstrologerWhereUniqueInput
  ): Promise<CallRecord[]> {
    const query = plainToClass(CallRecordFindManyArgs, request.query);
    const results = await this.service.findCallRecords(params.id, {
      ...query,
      select: {
        astrologer: {
          select: {
            id: true,
          },
        },

        callEnd: true,
        callStart: true,
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/callRecords")
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async connectCallRecords(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() body: CallRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      callRecords: {
        connect: body,
      },
    };
    await this.service.updateAstrologer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/callRecords")
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async updateCallRecords(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() body: CallRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      callRecords: {
        set: body,
      },
    };
    await this.service.updateAstrologer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/callRecords")
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async disconnectCallRecords(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() body: CallRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      callRecords: {
        disconnect: body,
      },
    };
    await this.service.updateAstrologer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/consultations")
  @ApiNestedQuery(ConsultationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "any",
  })
  async findConsultations(
    @common.Req() request: Request,
    @common.Param() params: AstrologerWhereUniqueInput
  ): Promise<Consultation[]> {
    const query = plainToClass(ConsultationFindManyArgs, request.query);
    const results = await this.service.findConsultations(params.id, {
      ...query,
      select: {
        astrologer: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        status: true,
        time: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/consultations")
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async connectConsultations(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() body: ConsultationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultations: {
        connect: body,
      },
    };
    await this.service.updateAstrologer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/consultations")
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async updateConsultations(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() body: ConsultationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultations: {
        set: body,
      },
    };
    await this.service.updateAstrologer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/consultations")
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async disconnectConsultations(
    @common.Param() params: AstrologerWhereUniqueInput,
    @common.Body() body: ConsultationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultations: {
        disconnect: body,
      },
    };
    await this.service.updateAstrologer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
