/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Astrologer } from "./Astrologer";
import { AstrologerCountArgs } from "./AstrologerCountArgs";
import { AstrologerFindManyArgs } from "./AstrologerFindManyArgs";
import { AstrologerFindUniqueArgs } from "./AstrologerFindUniqueArgs";
import { CreateAstrologerArgs } from "./CreateAstrologerArgs";
import { UpdateAstrologerArgs } from "./UpdateAstrologerArgs";
import { DeleteAstrologerArgs } from "./DeleteAstrologerArgs";
import { CallRecordFindManyArgs } from "../../callRecord/base/CallRecordFindManyArgs";
import { CallRecord } from "../../callRecord/base/CallRecord";
import { ConsultationFindManyArgs } from "../../consultation/base/ConsultationFindManyArgs";
import { Consultation } from "../../consultation/base/Consultation";
import { AstrologerService } from "../astrologer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Astrologer)
export class AstrologerResolverBase {
  constructor(
    protected readonly service: AstrologerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "read",
    possession: "any",
  })
  async _astrologersMeta(
    @graphql.Args() args: AstrologerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Astrologer])
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "read",
    possession: "any",
  })
  async astrologers(
    @graphql.Args() args: AstrologerFindManyArgs
  ): Promise<Astrologer[]> {
    return this.service.astrologers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Astrologer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "read",
    possession: "own",
  })
  async astrologer(
    @graphql.Args() args: AstrologerFindUniqueArgs
  ): Promise<Astrologer | null> {
    const result = await this.service.astrologer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Astrologer)
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "create",
    possession: "any",
  })
  async createAstrologer(
    @graphql.Args() args: CreateAstrologerArgs
  ): Promise<Astrologer> {
    return await this.service.createAstrologer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Astrologer)
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "update",
    possession: "any",
  })
  async updateAstrologer(
    @graphql.Args() args: UpdateAstrologerArgs
  ): Promise<Astrologer | null> {
    try {
      return await this.service.updateAstrologer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Astrologer)
  @nestAccessControl.UseRoles({
    resource: "Astrologer",
    action: "delete",
    possession: "any",
  })
  async deleteAstrologer(
    @graphql.Args() args: DeleteAstrologerArgs
  ): Promise<Astrologer | null> {
    try {
      return await this.service.deleteAstrologer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CallRecord], { name: "callRecords" })
  @nestAccessControl.UseRoles({
    resource: "CallRecord",
    action: "read",
    possession: "any",
  })
  async findCallRecords(
    @graphql.Parent() parent: Astrologer,
    @graphql.Args() args: CallRecordFindManyArgs
  ): Promise<CallRecord[]> {
    const results = await this.service.findCallRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Consultation], { name: "consultations" })
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "any",
  })
  async findConsultations(
    @graphql.Parent() parent: Astrologer,
    @graphql.Args() args: ConsultationFindManyArgs
  ): Promise<Consultation[]> {
    const results = await this.service.findConsultations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
