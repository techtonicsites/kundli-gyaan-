/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CallRecord as PrismaCallRecord,
  Astrologer as PrismaAstrologer,
  User as PrismaUser,
} from "@prisma/client";

export class CallRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CallRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.callRecord.count(args);
  }

  async callRecords(
    args: Prisma.CallRecordFindManyArgs
  ): Promise<PrismaCallRecord[]> {
    return this.prisma.callRecord.findMany(args);
  }
  async callRecord(
    args: Prisma.CallRecordFindUniqueArgs
  ): Promise<PrismaCallRecord | null> {
    return this.prisma.callRecord.findUnique(args);
  }
  async createCallRecord(
    args: Prisma.CallRecordCreateArgs
  ): Promise<PrismaCallRecord> {
    return this.prisma.callRecord.create(args);
  }
  async updateCallRecord(
    args: Prisma.CallRecordUpdateArgs
  ): Promise<PrismaCallRecord> {
    return this.prisma.callRecord.update(args);
  }
  async deleteCallRecord(
    args: Prisma.CallRecordDeleteArgs
  ): Promise<PrismaCallRecord> {
    return this.prisma.callRecord.delete(args);
  }

  async getAstrologer(parentId: string): Promise<PrismaAstrologer | null> {
    return this.prisma.callRecord
      .findUnique({
        where: { id: parentId },
      })
      .astrologer();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.callRecord
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
