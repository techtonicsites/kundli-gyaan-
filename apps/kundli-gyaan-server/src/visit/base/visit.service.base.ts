/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Visit as PrismaVisit,
  User as PrismaUser,
} from "@prisma/client";

export class VisitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VisitCountArgs, "select">): Promise<number> {
    return this.prisma.visit.count(args);
  }

  async visits(args: Prisma.VisitFindManyArgs): Promise<PrismaVisit[]> {
    return this.prisma.visit.findMany(args);
  }
  async visit(args: Prisma.VisitFindUniqueArgs): Promise<PrismaVisit | null> {
    return this.prisma.visit.findUnique(args);
  }
  async createVisit(args: Prisma.VisitCreateArgs): Promise<PrismaVisit> {
    return this.prisma.visit.create(args);
  }
  async updateVisit(args: Prisma.VisitUpdateArgs): Promise<PrismaVisit> {
    return this.prisma.visit.update(args);
  }
  async deleteVisit(args: Prisma.VisitDeleteArgs): Promise<PrismaVisit> {
    return this.prisma.visit.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.visit
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
