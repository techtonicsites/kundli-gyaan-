/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Prediction } from "./Prediction";
import { PredictionCountArgs } from "./PredictionCountArgs";
import { PredictionFindManyArgs } from "./PredictionFindManyArgs";
import { PredictionFindUniqueArgs } from "./PredictionFindUniqueArgs";
import { CreatePredictionArgs } from "./CreatePredictionArgs";
import { UpdatePredictionArgs } from "./UpdatePredictionArgs";
import { DeletePredictionArgs } from "./DeletePredictionArgs";
import { Consultation } from "../../consultation/base/Consultation";
import { PredictionService } from "../prediction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Prediction)
export class PredictionResolverBase {
  constructor(
    protected readonly service: PredictionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "read",
    possession: "any",
  })
  async _predictionsMeta(
    @graphql.Args() args: PredictionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Prediction])
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "read",
    possession: "any",
  })
  async predictions(
    @graphql.Args() args: PredictionFindManyArgs
  ): Promise<Prediction[]> {
    return this.service.predictions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Prediction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "read",
    possession: "own",
  })
  async prediction(
    @graphql.Args() args: PredictionFindUniqueArgs
  ): Promise<Prediction | null> {
    const result = await this.service.prediction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prediction)
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "create",
    possession: "any",
  })
  async createPrediction(
    @graphql.Args() args: CreatePredictionArgs
  ): Promise<Prediction> {
    return await this.service.createPrediction({
      ...args,
      data: {
        ...args.data,

        consultation: args.data.consultation
          ? {
              connect: args.data.consultation,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prediction)
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "update",
    possession: "any",
  })
  async updatePrediction(
    @graphql.Args() args: UpdatePredictionArgs
  ): Promise<Prediction | null> {
    try {
      return await this.service.updatePrediction({
        ...args,
        data: {
          ...args.data,

          consultation: args.data.consultation
            ? {
                connect: args.data.consultation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Prediction)
  @nestAccessControl.UseRoles({
    resource: "Prediction",
    action: "delete",
    possession: "any",
  })
  async deletePrediction(
    @graphql.Args() args: DeletePredictionArgs
  ): Promise<Prediction | null> {
    try {
      return await this.service.deletePrediction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Consultation, {
    nullable: true,
    name: "consultation",
  })
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "any",
  })
  async getConsultation(
    @graphql.Parent() parent: Prediction
  ): Promise<Consultation | null> {
    const result = await this.service.getConsultation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
